$(function() {
    "use strict";

    function a() {
        var a = $(window).width(),
            b = $(".content").width(),
            c = $('[class*="outset"]');
        c.length && c.each(function() {
            var c = (a - b) / 2 - 10;
            $(this).hasClass("outset--right") && (940 >= a ? ($(this).css({
                "margin-right": -c
            }), 0 !== $(this).has(".caption").length && $(this).children(".caption").css({
                "padding-right": c
            })) : ($(this).css({
                "margin-right": ""
            }), 0 !== $(this).has(".caption").length && $(this).children(".caption").css({
                "padding-right": ""
            }))), $(this).hasClass("outset--center") && (940 >= a ? ($(this).css({
                "margin-right": -c,
                "margin-left": -c
            }), 0 !== $(this).has(".caption").length && $(this).children(".caption").css({
                "padding-right": c,
                "padding-left": c
            })) : ($(this).css({
                "margin-right": "",
                "margin-left": ""
            }), 0 !== $(this).has(".caption").length && $(this).children(".caption").css({
                "padding-right": "",
                "padding-left": ""
            }))), $(this).hasClass("outset--left") && (940 >= a ? ($(this).css({
                "margin-left": -c
            }), 0 !== $(this).has(".caption").length && $(this).children(".caption").css({
                "padding-left": c
            })) : ($(this).css({
                "margin-left": ""
            }), 0 !== $(this).has(".caption").length && $(this).children(".caption").css({
                "padding-left": ""
            })))
        })
    }
    var b, c = 1;
    "IE" == window.browzerName && window.browzerVersion < 9 && (c = 0), 1 == c && ($(window).resize(function() {
            clearTimeout(b), b = setTimeout(a, 50)
        }), a()),
        function(a, b, c) {
            b.Bima = b.Bima || {}, b.Bima.HeaderSearchToggleInit = function() {
                this.init()
            }, b.Bima.HeaderSearchToggleInit.prototype = {
                init: function() {
                    function d() {
                        e.removeClass("is-open")
                    }
                    var e = a(".header__search"),
                        f = a(".header__search-toggle");
                    f.on("click", function() {
                        e.toggleClass("is-open")
                    }), a(c).on("click", function(a) {
                        e.is(a.target) || 0 !== e.has(a.target).length || e.removeClass("is-open")
                    });
                    var g;
                    a(b).on("resize", function() {
                        clearTimeout(g), g = setTimeout(d, 250)
                    })
                }
            }, new b.Bima.HeaderSearchToggleInit
        }(jQuery, window, document),
        function(a, b, c) {
            b.Bima = b.Bima || {}, b.Bima.DropdownsInit = function() {
                this.init()
            }, b.Bima.DropdownsInit.prototype = {
                init: function() {
                    var b = a(".dropdown__toggle");
                    b.each(function() {
                        var b = a(this).parent(".dropdown");
                        a(this).on("click", function() {
                            b.toggleClass("is-open")
                        }), a(c).on("click", function(c) {
                            a(c.target).is(b) || a(c.target).parents(b).is(b) || b.removeClass("is-open")
                        })
                    })
                }
            }, new b.Bima.DropdownsInit
        }(jQuery, window, document),
        function(a) {
            a.fn.phyScroll = function(b) {
                function c(b) {
                    a(b).click(function() {
                        function b(b) {
                            var c = a(window).scrollTop(),
                                d = Math.abs(c - b),
                                f = e.speed,
                                g = d / f;
                            return g
                        }

                        function c(b, c) {
                            a(e.scrollingElements).animate({
                                scrollTop: b
                            }, {
                                duration: c,
                                easing: e.easing,
                                start: e.start,
                                complete: e.complete,
                                fail: e.fail
                            })
                        }
                        if (location.pathname.replace(/^\//, "") === this.pathname.replace(/^\//, "") && location.hostname === this.hostname) {
                            var d = a(this.hash);
                            if (d = d.length ? d : a("[name=" + this.hash.slice(1) + "]"), d.length) {
                                var f = d.offset().top,
                                    g = b(f);
                                return g > e.maxDuration && (g = e.maxDuration), c(f, g), !1
                            }
                        }
                    })
                }
                var d = {
                        scrollingElements: "html, body",
                        speed: 5,
                        easing: "swing",
                        maxDuration: 2e3,
                        start: a.noop,
                        complete: a.noop,
                        fail: a.noop
                    },
                    e = a.extend(d, b);
                return a(this).each(function() {
                    var b = a(this);
                    c(b)
                }), this
            }
        }(jQuery),
        function(a, b, c) {
            var d = [{
                featureType: "water",
                stylers: [{
                    color: "#ffffff"
                }]
            }, {
                featureType: "landscape",
                stylers: [{
                    color: "#d9d9d9"
                }]
            }, {
                featureType: "landscape.natural.landcover",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "administrative",
                elementType: "geometry",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "administrative.country",
                elementType: "geometry",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "administrative",
                elementType: "labels",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "road",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "transit",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "poi",
                stylers: [{
                    visibility: "off"
                }]
            }];
            b.MapWidgets = b.MapWidgets || {}, b.MapWidget = b.MapWidget || {}, b.MapWidgets = function(a) {
                this.mapWidgetsData = a, this.init()
            }, b.MapWidgets.prototype = {
                mapWidgetsData: null,
                init: function() {
                    for (var a in this.mapWidgetsData) new b.MapWidget(a, this.mapWidgetsData[a])
                }
            }, b.MapWidget = function(a, b) {
                this.widgetID = a, this.mapData = b, this.init()
            }, b.MapWidget.prototype = {
                widgetID: null,
                mapHTMLIdPrefix: "gmap--",
                popupHTMLIdPrefix: "map-popup--",
                mapData: null,
                map: null,
                zoomLevel: 2,
                infoWindow: null,
                markers: [],
                center: [44, 12],
                latLngBounds: null,
                init: function() {
                    this.createMap(), this.setBounds(), this.setCenter(), this.centerOnResize(), this.setInfoBox(), this.setMarkers()
                },
                createMap: function() {
                    this.map = new google.maps.Map(c.getElementById(this.getMapHTMLId()), this.getOptions()), this.map.mapTypes.set("map_style", new google.maps.StyledMapType(d, {
                        name: "Styled Map"
                    })), this.map.setMapTypeId("map_style")
                },
                getMapHTMLId: function() {
                    return this.mapHTMLIdPrefix + String(this.widgetID)
                },
                getPopupHTMLId: function() {
                    return this.popupHTMLIdPrefix + String(this.widgetID)
                },
                getOptions: function() {
                    return {
                        zoom: this.zoomLevel,
                        backgroundColor: "#fff",
                        center: new google.maps.LatLng(this.center[0], this.center[1]),
                        mapTypeControlOptions: {
                            mapTypeIds: [google.maps.MapTypeId.ROADMAP, "map_style"]
                        },
                        disableDefaultUI: !0,
                        scrollwheel: !1,
                        navigationControl: !1,
                        mapTypeControl: !1,
                        scaleControl: !1,
                        draggable: !1
                    }
                },
                setBounds: function() {
                    this.latLngBounds = new google.maps.LatLngBounds;
                    for (var a = 0; a < this.mapData.length; a++) this.latLngBounds.extend(this.getLatLong(a))
                },
                centerOnResize: function() {
                    var a = this;
                    google.maps.event.addDomListener(b, "resize", function() {
                        a.setCenter()
                    })
                },
                setCenter: function() {
                    a("#" + this.getMapHTMLId()).height() > 512 && a(b).width() > 960 ? (this.map.setCenter(new google.maps.LatLng(this.center[0], this.center[1])), this.map.setZoom(this.zoomLevel)) : this.map.fitBounds(this.latLngBounds)
                },
                getLatLong: function(a) {
                    return new google.maps.LatLng(this.mapData[a].Lat, this.mapData[a].Long)
                },
                setInfoBox: function() {
                    this.infoBox = new InfoBox({
                        content: c.getElementById(this.getPopupHTMLId()),
                        disableAutoPan: !1,
                        maxWidth: "206px",
                        alignBottom: !0,
                        pixelOffset: new google.maps.Size(-42, -43),
                        boxStyle: {
                            width: "206px"
                        },
                        closeBoxMargin: "-18px -14px",
                        closeBoxURL: "themes/bima/images/icon-pin-close.png" /*tpa=http://www.bimamobile.com/themes/bima/scripts/modules/themes/bima/images/icon-pin-close.png*/ ,
                        infoBoxClearance: "20px"
                    }), this.handleInfoBoxClose()
                },
                handleInfoBoxClose: function() {
                    var a = this;
                    google.maps.event.addListener(this.infoBox, "closeclick", function() {
                        a.setCenter()
                    })
                },
                setMarkers: function() {
                    for (var a = 0; a < this.mapData.length; a++) this.addMarker(a)
                },
                addMarker: function(a) {
                    var b = this.getGMarker(a);
                    b.set("index", a), b.set("that", this), google.maps.event.addListener(b, "click", this.clickMarkerHandler), b.setMap(this.map), this.markers.push(b)
                },
                getGMarker: function(a) {
                    return new google.maps.Marker({
                        position: this.getLatLong(a),
                        icon: this.getIcon(a),
                        zIndex: a + 1e3
                    })
                },
                clickMarkerHandler: function() {
                    var a = this.get("that"),
                        b = this.get("index"),
                        c = a.infoBox;
                    c.setContent(a.getInfoWindowHtml(a.mapData[b])), c.open(a.map, this), a.map.panTo(a.getLatLong(b))
                },
                getInfoWindowHtml: function(a) {
                    var b = '<div class="map-popup__content text-align--left">';
                    return b += a.Text, b += "</div>"
                },
                getIcon: function(a) {
                    return {
                        url: this.getIconURL(a),
                        size: new google.maps.Size(48, 70),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(12, 35),
                        scaledSize: new google.maps.Size(24, 35)
                    }
                },
                getIconURL: function(a) {
                    var b = this.mapData[a].PinColour;
                    return b = b.replace("#", ""), "themes/bima/images/icon-pin--" + b + ".png"
                }
            }, "MapWidgetsData" in b && new b.MapWidgets(MapWidgetsData)
        }(jQuery, window, document),
        function(a) {
            a(".ProfileWidget__profile__button--toggle-view").click(function() {
                var b = (a(this), a(this).parents(".ProfileWidget__profile")),
                    c = a(b).find(".ProfileWidget__profile__info--secondary");
                a(".ProfileWidget__profile").not(b).each(function() {
                    a(this).removeClass("view--full")
                }), a(".ProfileWidget__profile__info--secondary").not(c).each(function() {
                    a(this).fadeOut({
                        duration: 150
                    })
                }), a(b).toggleClass("view--brief view--full"), a(c).stop().fadeToggle({
                    duration: 150
                })
            })
        }(jQuery)
});